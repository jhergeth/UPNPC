//
   Created by joachim on 04.07.2015.

extends layout

block head
    link(rel="stylesheet" , href="/stylesheets/ui.fancytree.min.css")
    script(src="/javascripts/jquery.fancytree-all.min.js")
    script(src="https://cdnjs.cloudflare.com/ajax/libs/jquery.ui-contextmenu/1.10.0/jquery.ui-contextmenu.min.js")
    script(type='text/javascript').
        $(function(){$('#tree').fancytree({
            activeVisible:  true, // Make sure, active nodes are visible (expanded).
            aria:           false, // Enable WAI-ARIA support.
            autoActivate:   true, // Automatically activate a node when it is focused (using keys).
            autoCollapse:   true, // Automatically collapse all siblings, when a node is expanded.
            autoScroll:     true, // Automatically scroll nodes into visible area.
            clickFolderMode:4, // 1:activate, 2:expand, 3:activate and expand, 4:activate (dblclick expands)
            checkbox:       false, // Show checkboxes.
            debugLevel:     2, // 0:quiet, 1:normal, 2:debug
            disabled:       false, // Disable control
            focusOnSelect:  false, // Set focus when node is checked by a mouse click
            generateIds:    false, // Generate id attributes like <span id='fancytree-id-KEY'>
            idPrefix:       "ft_", // Used to generate node idï¿½s like <span id='fancytree-id-<key>'>.
            icons:          true, // Display node icons.
            keyboard:       true, // Support keyboard navigation.
            keyPathSeparator:"/", // Used by node.getKeyPath() and tree.loadKeyPath().
            minExpandLevel: 1, // 1: root node is not collapsible
            quicksearch:    false, // Navigate to next node by typing the first letters.
            selectMode:     2, // 1:single, 2:multi, 3:multi-hier
            tabbable:       true, // Whole tree behaves as one single control
            titlesTabbable: false, // Node titles can receive keyboard focus

            source: {
                url: "/upnp?op=getTreeData&id=0",
                cache: false
            },

            lazyLoad: function(event, data){
                var node = data.node;
                data.result = {
                    url: "/upnp?op=getTreeData&id="+node.key,
                    data: {key: node.key}
                }
            },

            dblclick: function (event, data) {
                var node = data.node;
                if(node.folder ){
                    $.get("/upnp?op=play&id="+node.key);
                    return false;
                }
                return true;
            },

            select: function(event, data){
                var node = data.node;
                if(node.folder ){
                    playlist = "/upnp?op=play&id="+node.key;
                }
            }


        })});
    script(type='text/javascript').
        $(function(){$("#Listen").contextmenu({
            delegate: ".hasmenu",
            menu: [
                {title: "Render", cmd: "render", uiIcon: "ui-icon-copy"},
                {title: "----"},
                {
                    title: "More", children: [
                    {title: "Sub 1", cmd: "sub1"},
                    {title: "Sub 2", cmd: "sub1"}
                ]
                }
            ],
            select: function (event, ui) {
                alert("select " + ui.cmd + " on " + ui.target.text());
            }
        })});

block content
    .container
        h4
            | #{serv}
            | &frasl; &nbsp;
            | #{rend} &nbsp;&nbsp;
            | #{restTime} &nbsp;&nbsp;
            | #{currFile}

        h2(ng-controller='statCtrl')
            img(src='#{msg.currPath}#')
            | {{msg.currFile}} [ {{msg.restTime}} ]

        .sidebar
            #Bild
                img(src='#{msg.currPath}')

        .main-content
            .dropdown
                .btn-group(role='group' aria-label='devsearch')
                    button.btn.btn-default(type='button')
                        a.glyphicon.glyphicon-search(href='/upnp?op=search')

                    .btn-group.open()
                        .btn-group(role='group' aria-label='devsel')
                            button.btn.btn-default.dropdown-toggle(
                                type='button'
                                id='serverMenu'
                                data-toggle='dropdown'
                                aria-haspopup='true'
                                aria-expanded='false'
                            ) Server
                                span.caret
                            ul.dropdown-menu(aria-labelledby='serverMenu')
                                each s in storage
                                    li
                                        a(href='/upnp?s=#{s}') #{s}

                        .btn-group(role='group' aria-label='devsel2')
                            button.btn.btn-default.dropdown-toggle(
                                type='button'
                                id='rendererMenu'
                                data-toggle='dropdown'
                                aria-haspopup='true'
                                aria-expanded='false'
                            ) Renderer
                                span.caret
                            ul.dropdown-menu(aria-labelledby='rendererMenu')
                                each r in renderer
                                    li
                                        a(href='/upnp?r=#{r}') #{r}

            .navbar.navbar-default.zeiger
                div.navbar-brand(onclick='$.get("/upnp?op=back")')
                    .fa.fa-backward  Back

                div.navbar-brand(onclick='$.get(#{playlist})')
                    .fa.fa-television  Go

                div.navbar-brand(onclick='$.get("/upnp?op=forward")')
                    .fa.fa-forward  Forward


            p Directory:
                #Listen
                    #tree
                        ul#treeData(style='display:none;')
                            if conts
                                each d in conts
                                    li.folder.hasmemu
                                        a(href='/upnp?op=getdir&id=#{d.getIdSync()}' target='_self') [#{d.getIdSync()}] #{d.getTitleSync()}

                            if items
                                each i in items
                                    li.hasmenu
                                        | [ #{i.getIdSync()} ] #{i.getTitleSync()}

